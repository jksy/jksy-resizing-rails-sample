h1 動画アップロード

form
  .mb-3.row
    label.form-label.col-sm-3.col-form-label for='video' File(MP4/MOV/AVI/WMV/ASF/WebM)
    .col-sm-10
      input.form-control#video type='file'
  button.btn.btn-primary.mb-3#submit type='submit' upload

javascript:
  video = new Resizing.Rails.VideoUploader(
    document.getElementById('video'),
    #{raw Resizing::Rails.railtie_routes_url_helpers.prepare_videos_url(only_path: true).to_json}
  );

  document.getElementById('submit').addEventListener(
    'click',
    (e) => {
      e.preventDefault()
      e.target.setAttribute('disabled', 'true')
      video.upload()
    }
  )

  video.addEventListener(e => {
    switch(e) {
    case 'no_file_found':
      (new Resizing.Rails.Toast()).show('Error', 'ファイルを指定してください')
    case 'upload_failed':
      (new Resizing.Rails.Toast()).show('Error', 'アップロードに失敗しました')
    }
    document.getElementById('submit').removeAttribute('disabled')
  })

.row.row-cols-1.row-cols-md-4.g-3
  - @videos.each do |video|
    .col
      .card.h-100
        img.js-video-thumbnail.card-img-top data-video-url=video.data_self_url
        .card-body
          h5.card-title = "#{video.id}:#{video.data_id}:#{video.data_state}"
          p.card-text = 'aoiefosjfoajfoasdf'
          = link_to 'Show video details', video, class: 'btn btn-primary'
        .card-footer
          small.text-muted = 'asfadf'

javascript:
  document.addEventListener('DOMContentLoaded', function () {
    elements = document.querySelectorAll('.js-video-thumbnail')
    elements.forEach(elem => {
      url = elem.getAttribute('data-video-url')
      fetcher = new Resizing.Rails.VideoFetcher(url)
      fetcher.fetch().then(data => {
        elem.setAttribute('src', data.thumbnail_url)
      })
    })
  })
